MODULE NPC0;

IMPORT EnvLayer;


CONST

  NewLine = 0AH;
  MaxInt = 7FFFFFFFH; MinInt = -MaxInt - 1;
  MaxLenInt = 11;
  MaxLenIdent = 32;

  TokIdentifier = -1; TokInt = -2; TokChar = -3;

  TokDo = 1; TokIf = 2; TokOf = 3; TokOr = 4; TokDiv = 5; TokEnd = 6;
  TokMod = 7; TokVar = 8; TokElse = 9; TokThen = 10; TokType = 11;
  TokArray = 12; TokBegin = 13; TokConst = 14; TokElsif = 15;
  TokWhile = 16; TokModule = 17; TokRecord = 18; TokProcedure = 19;
  NbrKeywords = 20;

  TokAmper = 30; TokAssign = 31; TokAsterisk = 32; TokBraceL = 33;
  TokBraceR = 34; TokBrackL = 35; TokBrackR = 36; TokColon = 37;
  TokComma = 38; TokDot = 39; TokMinus = 40; TokParenL = 41;
  TokParenR = 42; TokPercent = 43; TokPlus = 44; TokSemic = 45;
  TokSlash = 46; TokTilde = 47; TokEq = 48; TokEqN = 49; TokLss = 50;
  TokLEq = 51; TokGtr = 52; TokGEq = 53;

  ErrUnexpEof = MinInt + 1;
  ErrUnexpEofInComment = MinInt + 2;
  ErrIdentTooLong = MinInt + 3;
  ErrIntTooLong = MinInt + 4;
  ErrPostfixH = MinInt + 5;
  ErrIntOverflow = MinInt + 6;
  ErrCharOverflow = MinInt + 7;

  ErrOutOfMemTypes = MinInt + 10;
  ErrOutOfMemSymbols = MinInt + 11;

  MaxTypes = 20;
  MaxSymbols = 550;
  Marker = MaxSymbols - 1;

  ClassScope = 1; ClassConst = 2;
  ClassType = 3; ClassVar = 4;
  ClassProc = 5; ClassField = 6;

  FormBool = 1; FormChar = 2; FormInt = 3;
  FormArray = 8; FormRecord = 9;


TYPE

  Keyword = ARRAY 12 OF CHAR;

  Ident = RECORD
    data : ARRAY MaxLenIdent OF CHAR;
    len : INTEGER
  END;

  Source = RECORD
    line : INTEGER;
    pos : INTEGER;
    char : INTEGER;
    token : INTEGER;
    ident : Ident;
    value : INTEGER
  END;

  Type = RECORD
    form : INTEGER;
    size : INTEGER;
    len : INTEGER;
    value : INTEGER; (* array : base type, record : scope *)
    link: INTEGER (* - owner symbol (allocated) or
                     - next in free list (deallocated),
                     - -1 = NIL *)
  END;

  Symbol = RECORD
    name : Ident;
    level : INTEGER;
    class : INTEGER;
    type : INTEGER;
    scope : INTEGER; (* parent scope *)
    value : INTEGER; (* const or address *)
    value2 : INTEGER; (* - deref level for VAR params or
                         - forward address for ClassProc *)
    next: INTEGER (* - next in scope (allocated) or
                     - free list (deallocated),
                     - -1 = NIL *)
  END;


VAR

  envParam : INTEGER;
  code : ARRAY 10 OF INTEGER;

  keywordLens : ARRAY 10 OF INTEGER;
  keywords : ARRAY NbrKeywords OF Keyword;

  source : Source;

  types : ARRAY MaxTypes OF Type;
  freeTypes : INTEGER; (* first type of free type list *)
  symbols : ARRAY MaxSymbols OF Symbol;
  freeSymbols : INTEGER; (* first symbol of free symbol list *)
  allocSymbol : INTEGER; (* last allocated symbol *)
  topScope : INTEGER; (* top symbol of scope stack *)
  level : INTEGER; (* level of nested procedures *)
  boolType, charType, intType : INTEGER;


(* sys calls *)


PROCEDURE SysCall(nr : INTEGER);

  BEGIN
    IF nr = -1 THEN
      EnvLayer.Exit(envParam)
    ELSIF nr = -2 THEN
      EnvLayer.GetChar(envParam)
    ELSIF nr = -3 THEN
      EnvLayer.PutChar(envParam)
    ELSIF nr = -4 THEN
      EnvLayer.WriteFile(code)
    END
  END SysCall;


(* print procedures *)


PROCEDURE PrintChar(char : INTEGER);

  BEGIN
    envParam := char;
    SysCall(-3)
  END PrintChar;


PROCEDURE PrintChars(chars : INTEGER);

  BEGIN
    IF chars > 0 THEN
      PrintChars(chars DIV 256);
      PrintChar(chars MOD 256)
    END
  END PrintChars;


PROCEDURE PrintInt(int : INTEGER);

  VAR
    i : INTEGER;
    tmpBuf : ARRAY MaxLenInt + 1 OF CHAR;

  BEGIN
    i := 0;
    IF int = MinInt THEN
      (* -2147483648 *)
      PrintChars(2D323134H);
      PrintChars(37343833H);
      PrintChars(363438H);
      int := 0
    ELSIF int < 0 THEN
      PrintChar(2DH (*-*));
      int := -int
    ELSIF int = 0 THEN
      tmpBuf[0] := 30X (*0*);
      i := i + 1
    END;
    WHILE int # 0 DO
      tmpBuf[i] := CHR(30H + int MOD 10);
      i := i + 1;
      int := int DIV 10
    END;
    WHILE i > 0 DO
      i := i - 1;
      PrintChar(ORD(tmpBuf[i]))
    END
  END PrintInt;


PROCEDURE PrintKeyword(token : INTEGER);

  VAR kwLen : INTEGER;

  PROCEDURE print(VAR kw : Keyword; len : INTEGER);

    VAR ix : INTEGER;

    BEGIN
      ix := 0;
      WHILE ix < len DO
        PrintChar(ORD(kw[ix]));
        ix := ix + 1
      END
    END print;

  BEGIN (* PrintKeyword *)
    kwLen := 0;
    WHILE keywordLens[kwLen] < token DO
      kwLen := kwLen + 1
    END;
    print(keywords[token], kwLen)
  END PrintKeyword;


(* scanner *)


PROCEDURE ScannerInitialize;

  PROCEDURE enterKW(token : INTEGER;
                    chars1, chars2, chars3 : INTEGER);

    PROCEDURE enterChars(VAR kw : Keyword;
                         ix : INTEGER;
                         chars : INTEGER);
      BEGIN
        IF chars > 0 THEN
          enterChars(kw, ix + 1, chars DIV 256);
          kw[ix] := CHR(chars MOD 256)
        END
      END enterChars;

    BEGIN (* enterKW *)
      enterChars(keywords[token], 0, chars1);
      enterChars(keywords[token], 4, chars2);
      enterChars(keywords[token], 8, chars3)
    END enterKW;

  BEGIN (* ScannerInitialize *)
    keywordLens[0] := 0;
    keywordLens[1] := 0;
    enterKW(TokDo, 4F44H, 0, 0);
    enterKW(TokIf, 4649H, 0, 0);
    enterKW(TokOf, 464FH, 0, 0);
    enterKW(TokOr, 524FH, 0, 0);
    keywordLens[2] := TokOr;
    enterKW(TokDiv, 564944H, 0, 0);
    enterKW(TokEnd, 444E45H, 0, 0);
    enterKW(TokMod, 444F4DH, 0, 0);
    enterKW(TokVar, 524156H, 0, 0);
    keywordLens[3] := TokVar;
    enterKW(TokElse, 45534C45H, 0, 0);
    enterKW(TokThen, 4E454854H, 0, 0);
    enterKW(TokType, 45505954H, 0, 0);
    keywordLens[4] := TokType;
    enterKW(TokArray, 41525241H, 59H, 0);
    enterKW(TokBegin, 49474542H, 4EH, 0);
    enterKW(TokConst, 534E4F43H, 54H, 0);
    enterKW(TokElsif, 49534C45H, 46H, 0);
    enterKW(TokWhile, 4C494857H, 45H, 0);
    keywordLens[5] := TokWhile;
    enterKW(TokModule, 55444F4DH, 454CH, 0);
    enterKW(TokRecord, 4F434552H, 4452H, 0);
    keywordLens[6] := TokRecord;
    keywordLens[7] := TokRecord;
    keywordLens[8] := TokRecord;
    enterKW(TokProcedure, 434F5250H, 52554445H, 45H);
    keywordLens[9] := TokProcedure;
    source.line := 0;
    source.char := NewLine
  END ScannerInitialize;


PROCEDURE ScannerRaiseError(errorNr : INTEGER);

  BEGIN
    PrintChar(NewLine);
    PrintChar(NewLine);
    PrintChars(45525220H);
    PrintInt(source.line);
    PrintChar(2FH);
    PrintInt(source.pos);
    PrintChars(3A20H);
    IF errorNr < MinInt + 256 THEN
      PrintInt(errorNr - MinInt)
    ELSE (* errorNr contains expected token *)
      PrintKeyword(errorNr);
      PrintChars(203FH)
    END;
    PrintChar(NewLine);
    envParam := errorNr; SysCall(-1)
  END ScannerRaiseError;


PROCEDURE ScannerReadChar;

  BEGIN
    IF source.char = NewLine THEN
      source.line := source.line + 1;
      source.pos := 1
    ELSE
      source.pos := source.pos + 1
    END;
    SysCall(-2); source.char := envParam;
    IF source.char = -1 THEN
      ScannerRaiseError(ErrUnexpEof)
    END
  END ScannerReadChar;


PROCEDURE ScannerNext;


  PROCEDURE comment;

    VAR repeat : BOOLEAN;

    BEGIN
      ScannerReadChar;
      repeat := TRUE;
      WHILE repeat DO
        IF source.char = 28H (* ( *) THEN
          ScannerReadChar;
          IF source.char = 2AH (* * *) THEN
            comment
          END
        ELSIF source.char = 2AH (* * *) THEN
          ScannerReadChar;
          IF source.char = 29H (* ) *) THEN
            repeat := FALSE;
            ScannerReadChar;
          END
        ELSE
          ScannerReadChar;
        END
      END
    END comment;


  PROCEDURE identifier;

    VAR repeat : BOOLEAN; i, k : INTEGER;

    BEGIN
      source.ident.len := 0;
      repeat := TRUE;
      WHILE repeat DO
        IF source.ident.len < MaxLenIdent THEN
          source.ident.data[source.ident.len] := CHR(source.char);
          source.ident.len := source.ident.len + 1;
          ScannerReadChar;
          repeat :=
            (source.char >= 30H) & (source.char <= 39H) OR
            (source.char >= 41H) & (source.char <= 5AH) OR
            (source.char >= 61H) & (source.char <= 7AH);
        ELSE
          ScannerRaiseError(ErrIdentTooLong)
        END
      END;
      source.token := TokIdentifier;
      IF source.ident.len <= 9 (* biggest keyword PROCEDURE *) THEN
        k := keywordLens[source.ident.len - 1] + 1;
        WHILE k <= keywordLens[source.ident.len] DO
          i := 0;
          WHILE i < source.ident.len DO
            IF source.ident.data[i] # keywords[k][i] THEN
              i := MaxInt
            ELSE
              i := i + 1
            END
          END;
          IF i = source.ident.len THEN
            source.token := k;
            k := MaxInt
          ELSE
            k := k + 1
          END
        END
      END
    END identifier;


  PROCEDURE number;

    VAR

      buf : ARRAY MaxLenInt OF CHAR;
      bufIx, bufIx2 : INTEGER;
      hex : BOOLEAN; base : INTEGER;
      n : INTEGER; c : CHAR;
      max, maxMod : INTEGER;

    BEGIN
      bufIx := 0;
      hex := TRUE;
      base := 10;
      WHILE hex OR (source.char >= 30H) & (source.char <= 39H) DO
        IF bufIx < MaxLenInt THEN
          buf[bufIx] := CHR(source.char);
          bufIx := bufIx + 1;
          ScannerReadChar;
          hex := (source.char >= 41H) & (source.char <= 46H);
          IF hex THEN base := 16 END
        ELSE
          ScannerRaiseError(ErrIntTooLong)
        END
      END;
      source.token := TokInt;
      IF source.char = 48H THEN
        base := 16;
        ScannerReadChar
      ELSIF source.char = 58H THEN
        base := 16;
        ScannerReadChar;
        source.token := TokChar
      ELSIF base = 16 THEN
        ScannerRaiseError(ErrPostfixH)
      END;
      bufIx2 := 0;
      source.value := 0;
      max := MaxInt DIV base;
      maxMod := MaxInt MOD base;
      WHILE bufIx2 < bufIx DO
        c := buf[bufIx2];
        bufIx2 := bufIx2 + 1;
        IF (c >= 41X) & (c <= 46X) THEN
          n := 10 - 41H + ORD(c)
        ELSE
          n := - 30H + ORD(c)
        END;
        IF (source.value < max) OR (n <= maxMod) THEN
          source.value := base * source.value + n
        ELSE
          ScannerRaiseError(ErrIntOverflow)
        END
      END;
      IF (source.token = TokChar) & (source.value > 255) THEN
        ScannerRaiseError(ErrCharOverflow)
      END
    END number;


  BEGIN (* ScannerNext *)
    source.token := 0;
    WHILE source.token = 0 DO
      IF source.char <= 20H THEN
        ScannerReadChar
      ELSIF source.char < 41H (* A *) THEN
        IF source.char < 30H (* 0 *) THEN
          IF source.char = 23H (* # *) THEN
            source.token := TokEqN; ScannerReadChar
          ELSIF source.char = 26H (* & *) THEN
            source.token := TokAmper; ScannerReadChar
          ELSIF source.char = 28H (* ( *) THEN
            source.token := TokParenL; ScannerReadChar;
            IF source.char = 2AH (* * *) THEN
              comment; source.token := 0
            END
          ELSIF source.char = 29H (* ) *) THEN
            source.token := TokParenR; ScannerReadChar
          ELSIF source.char = 2AH (* * *) THEN
            source.token := TokAsterisk; ScannerReadChar
          ELSIF source.char = 2BH (* + *) THEN
            source.token := TokPlus; ScannerReadChar
          ELSIF source.char = 2CH (* , *) THEN
            source.token := TokComma; ScannerReadChar
          ELSIF source.char = 2DH (* - *) THEN
            source.token := TokMinus; ScannerReadChar
          ELSIF source.char = 2EH (* . *) THEN
            source.token := TokDot; ScannerReadChar
          ELSIF source.char = 2FH (* / *) THEN
            source.token := TokSlash; ScannerReadChar
          ELSE (* ! $ % ' *)
            ScannerReadChar
          END
        ELSIF source.char < 3AH (* : *) THEN
          number
        ELSIF source.char = 3AH (* : *) THEN
          source.token := TokColon; ScannerReadChar;
          IF source.char = 3DH (* = *) THEN
            source.token := TokAssign; ScannerReadChar
          END
        ELSIF source.char = 3BH (* ; *) THEN
          source.token := TokSemic; ScannerReadChar
        ELSIF source.char = 3CH (* < *) THEN
          source.token := TokLss; ScannerReadChar;
          IF source.char = 3DH (* = *) THEN
            source.token := TokLEq; ScannerReadChar
          END
        ELSIF source.char = 3DH (* = *) THEN
          source.token := TokEq; ScannerReadChar
        ELSIF source.char = 3EH (* > *) THEN
          source.token := TokGtr; ScannerReadChar;
          IF source.char = 3DH (* = *) THEN
            source.token := TokGEq; ScannerReadChar
          END
        ELSE (* ? @ *)
          ScannerReadChar
        END
      ELSIF source.char < 5BH (* [ *) THEN
        identifier
      ELSIF source.char < 61H (* a *) THEN
        IF source.char = 5BH (* [ *) THEN
          source.token := TokBrackL; ScannerReadChar
        ELSIF source.char = 5DH (* ] *) THEN
          source.token := TokBrackR; ScannerReadChar
        ELSE (* ^ _ ` *)
          ScannerReadChar
        END
      ELSIF source.char < 7BH (* { *) THEN
        identifier
      ELSE
        IF source.char = 7BH (* { *) THEN
          source.token := TokBraceL; ScannerReadChar
        ELSIF source.char = 7DH (* } *) THEN
          source.token := TokBraceR; ScannerReadChar
        ELSIF source.char = 7EH (* ~ *) THEN
          source.token := TokTilde; ScannerReadChar
        ELSE (* | >7E *)
          ScannerReadChar
        END
      END
    END
  END ScannerNext;


(* symbol tables *)


PROCEDURE STableInitialize;

  VAR i : INTEGER;

  BEGIN
    i := 0;
    WHILE i < MaxTypes DO
      types[i].form := 0;
      types[i].size := 0;
      types[i].len := 0;
      types[i].value := -1;
      types[i].link := i + 1;
      i := i + 1
    END;
    types[i - 1].link := -1;
    freeTypes := 0;
    i := 0;
    WHILE i < MaxSymbols DO
      symbols[i].name.len := 0;
      symbols[i].level := 0;
      symbols[i].class := 0;
      symbols[i].type := -1;
      symbols[i].scope := -1;
      symbols[i].value := 0;
      symbols[i].value2 := 0;
      symbols[i].next := i + 1;
      i := i + 1
    END;
    symbols[Marker].next := -1;
    freeSymbols := 0;
    topScope := -1
  END STableInitialize;


PROCEDURE STableAllocType(VAR t : INTEGER; form, size, link : INTEGER);

  BEGIN
    IF freeTypes # -1 THEN
      types[freeTypes].form := form;
      types[freeTypes].size := size;
      types[freeTypes].len := 0;
      types[freeTypes].value := -1;
      t := freeTypes;
      PrintChars(41543A20H); PrintInt(t); PrintChar(NewLine);
      freeTypes := types[t].link;
      types[t].link := link
    ELSE
      ScannerRaiseError(ErrOutOfMemTypes)
    END
  END STableAllocType;


PROCEDURE STableCompIdent(VAR eq : BOOLEAN; VAR i1, i2 : Ident);

  VAR i : INTEGER;

  BEGIN
    IF i1.len # i2.len THEN
      eq := FALSE
    ELSE
      i := 0; eq := TRUE;
      WHILE i < i1.len DO
        IF i1.data[i] = i2.data[i] THEN
          i := i + 1
        ELSE
          i := i1.len;
          eq := FALSE
        END
      END
    END
  END STableCompIdent;


PROCEDURE STableCopyIdent(VAR trg, src : Ident);

  VAR i : INTEGER;

  BEGIN
    trg.len := src.len;
    i := 0;
    WHILE i < src.len DO
      trg.data[i] := src.data[i];
      i := i + 1
    END
  END STableCopyIdent;


PROCEDURE STableAllocSymbol(class : INTEGER);

  BEGIN
    IF freeSymbols # Marker THEN
      IF class = ClassScope THEN
        symbols[freeSymbols].name.len := 0;
        symbols[freeSymbols].scope := topScope
      ELSE
        STableCopyIdent(symbols[freeSymbols].name, symbols[Marker].name);
        symbols[freeSymbols].scope := -1
      END;
      symbols[freeSymbols].level := level;
      symbols[freeSymbols].class := class;
      symbols[freeSymbols].type := -1;
      symbols[freeSymbols].value := 0;
      symbols[freeSymbols].value2 := 0;
      allocSymbol := freeSymbols;
      PrintChars(41533A20H); PrintInt(allocSymbol); PrintChar(NewLine);
      freeSymbols := symbols[allocSymbol].next;
      symbols[allocSymbol].next := Marker
    ELSE
      ScannerRaiseError(ErrOutOfMemSymbols)
    END
  END STableAllocSymbol;


PROCEDURE STableFindSymbol(VAR y : INTEGER; scope : INTEGER);

  VAR eq : BOOLEAN;

  BEGIN
    y := scope;
    STableCompIdent(eq,
      symbols[symbols[y].next].name, symbols[Marker].name);
    WHILE ~eq DO
      y := symbols[y].next;
      STableCompIdent(eq,
        symbols[symbols[y].next].name, symbols[Marker].name)
    END
  END STableFindSymbol;


PROCEDURE STableDeallocScope(scope : INTEGER);

  VAR y : INTEGER;


  PROCEDURE symbol(VAR y : INTEGER);

    VAR t : INTEGER;


    PROCEDURE type(t : INTEGER);

      BEGIN
        PrintChars(44543A20H); PrintInt(t); PrintChar(NewLine);
        IF types[t].form = FormArray THEN
          IF types[types[t].value].link = -1 THEN
            type(types[t].value)
          END;
          types[t].link := freeTypes;
          freeTypes := t
        ELSIF types[t].form = FormRecord THEN
          STableDeallocScope(types[t].value);
          types[t].link := freeTypes;
          freeTypes := t
        END
      END type;


    BEGIN (* symbol *)
      PrintChars(44533A20H); PrintInt(y); PrintChar(NewLine);
      IF symbols[y].class = ClassProc THEN
        STableDeallocScope(symbols[y].scope)
      END;
      t := symbols[y].type;
      IF (t >= 0) & ((types[t].link = y) OR (types[t].link = -1)) THEN
        type(t)
      END
    END symbol;


  BEGIN (* STableDeallocScope *)
    y := scope;
    symbol(y);
    WHILE symbols[y].next # Marker DO
      y := symbols[y].next;
      symbol(y)
    END;
    symbols[y].next := freeSymbols;
    freeSymbols := scope
  END STableDeallocScope;


PROCEDURE tests;

  VAR y : INTEGER;

  BEGIN
    STableAllocSymbol(ClassScope);
    topScope := allocSymbol;
    ScannerNext; (* MODULE *)
    ScannerNext; (* NPC0 *)
    STableCopyIdent(symbols[Marker].name, source.ident);
    STableFindSymbol(y, topScope);
    IF symbols[y].next = Marker THEN
      STableAllocSymbol(ClassConst);
      symbols[y].next := allocSymbol;
      y := allocSymbol
    ELSE
      ScannerRaiseError(MinInt + 99)
    END;
    STableAllocSymbol(ClassType);
    symbols[y].next := allocSymbol;
    STableAllocType(y, FormInt, 4, allocSymbol);
    symbols[allocSymbol].type := y;
    STableDeallocScope(topScope);
  END tests;


BEGIN
  ScannerInitialize;
  ScannerReadChar;
  STableInitialize;
  STableAllocType(boolType, FormBool, 1, -1);
  STableAllocType(charType, FormChar, 1, -1);
  STableAllocType(intType, FormInt, 4, -1);
  tests()
END NPC0.
