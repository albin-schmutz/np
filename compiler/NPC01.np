MODULE NPC01 (* main parser *);

IMPORT Sys, Buf,
  Base := NPC01B,
  Scanner := NPC01S,
  STable := NPC01Y,
  Gen := NPC01G;


VAR

  source : Scanner.Source; (* root module *)
  level : INTEGER; (* level of nested procedures *)
  modules : INTEGER; (* linked list of module symbols *)
  varsize : INTEGER;
  entrypoint : INTEGER;


PROCEDURE parse;

  VAR yModule : INTEGER;


  PROCEDURE accept(VAR s : Scanner.Source; token : INTEGER);

    BEGIN
      IF s.token # token THEN
        IF token = Scanner.TokIdent THEN
          Scanner.RaiseError(s, Base.ErrIdentExp)
        ELSIF token = Scanner.TokInt THEN
          Scanner.RaiseError(s, Base.ErrIntExp)
        ELSIF token = Scanner.TokChar THEN
          Scanner.RaiseError(s, Base.ErrCharExp)
        ELSE
          Scanner.RaiseError(s, token)
        END
      END
    END accept;


  PROCEDURE checkBool(VAR s : Scanner.Source; VAR g : Gen.Gen);

    BEGIN
      IF STable.types[g.type].form # STable.FormBool THEN
        Scanner.RaiseError(s, Base.ErrBoolExp)
      END
    END checkBool;


  PROCEDURE checkChar(VAR s : Scanner.Source; VAR g : Gen.Gen);

    BEGIN
      IF STable.types[g.type].form # STable.FormChar THEN
        Scanner.RaiseError(s, Base.ErrCharExp)
      END
    END checkChar;


  PROCEDURE checkInt(VAR s : Scanner.Source; VAR g : Gen.Gen);

    BEGIN
      IF STable.types[g.type].form # STable.FormInt THEN
        Scanner.RaiseError(s, Base.ErrIntExp)
      END
    END checkInt;


  PROCEDURE identDef(VAR s : Scanner.Source; VAR y : INTEGER;
                     class : INTEGER);

    BEGIN
      accept(s, Scanner.TokIdent);
      STable.CopyIdent(STable.symbols[STable.Marker].name, s.ident);
      STable.FindSymbol(y, STable.topScope);
      IF STable.symbols[y].next = STable.Marker THEN
        STable.AllocSymbol(s, class, level);
        STable.SymbolNext(y, STable.allocSymbol);
        y := STable.allocSymbol;
        Scanner.Next(s);
        IF s.token = Scanner.TokAsterisk THEN
          STable.SymbolPublic(y); Scanner.Next(s)
        END
      ELSE
        Scanner.RaiseError(s, Base.ErrMultipleDef)
      END
    END identDef;


  PROCEDURE identUse(VAR s : Scanner.Source; VAR y : INTEGER);


    PROCEDURE checkLevel(VAR s : Scanner.Source; VAR y : STable.Symbol);

      BEGIN
        IF (y.level # 0) &
           (y.level # level) &
           (y.class = STable.ClassVar) THEN
          Scanner.RaiseError(s, Base.ErrIdentUndef)
        END
      END checkLevel;


    PROCEDURE search(VAR s : Scanner.Source; VAR y : INTEGER;
                     scope : INTEGER; VAR ident : Scanner.Ident);

      BEGIN
        STable.CopyIdent(STable.symbols[STable.Marker].name, ident);
        WHILE scope # -1 DO
          STable.FindSymbol(y, scope);
          IF STable.symbols[y].next # STable.Marker THEN
            scope := -1
          ELSE
            scope := STable.symbols[scope].scope
          END
        END;
        IF STable.symbols[y].next # STable.Marker THEN
          y := STable.symbols[y].next
        ELSE
          Scanner.RaiseError(s, Base.ErrIdentUndef)
        END
      END search;


    BEGIN (* identUse *)
      search(s, y, STable.topScope, s.ident);
      IF STable.symbols[y].class = STable.ClassQual THEN
        Scanner.Next(s); accept(s, Scanner.TokDot); 
        Scanner.Next(s); accept(s, Scanner.TokIdent); 
        search(s, y, STable.symbols[y].value, s.ident)
      END;
      checkLevel(s, STable.symbols[y])
    END identUse;


  PROCEDURE expr(VAR s : Scanner.Source; VAR g : Gen.Gen);

    VAR op : INTEGER; g2 : Gen.Gen;


    PROCEDURE Op1(VAR s : Scanner.Source; VAR g : Gen.Gen; op : INTEGER);

      BEGIN
        IF op = Scanner.TokMinus THEN
          IF g.mode = STable.ClassConst THEN
            IF g.addr1 # Sys.MinInt THEN
              g.addr1 := -g.addr1
            ELSE
              Scanner.RaiseError(s, Base.ErrIntOverflow)
            END
          ELSE
            Gen.Op1(s, g, op)
          END
        END
      END Op1;


    PROCEDURE Op2(VAR s : Scanner.Source; VAR g : Gen.Gen; VAR g2 : Gen.Gen; op : INTEGER);


      PROCEDURE mul(VAR s : Scanner.Source; VAR g : Gen.Gen; VAR g2 : Gen.Gen);

        VAR isNeg : BOOLEAN; i : INTEGER;

        BEGIN
          IF (g.addr1 = 0) OR (g2.addr1 = 0) THEN
            g.addr1 := 0
          ELSE
            IF (g.addr1 > 0) & (g2.addr1 < 0) OR
               (g.addr1 < 0) & (g2.addr1 > 0) THEN
              isNeg := TRUE;
              i := Sys.MinInt
            ELSE
              isNeg := FALSE;
              i := Sys.MaxInt
            END;
            i := i DIV g2.addr1;
            IF (g.addr1 < 0) & (i > g.addr1) OR
               (g.addr1 > 0) & (i < g.addr1) THEN
              Scanner.RaiseError(s, Base.ErrIntOverflow)
            ELSE
              g.addr1 := g.addr1 * g2.addr1
            END
          END
        END mul;


      PROCEDURE div(VAR s : Scanner.Source; VAR g : Gen.Gen; VAR g2 : Gen.Gen);

        BEGIN
          IF g2.addr1 = 0 THEN
            Scanner.RaiseError(s, Base.ErrDivZero)
          ELSE
            g.addr1 := g.addr1 DIV g2.addr1
          END
        END div;


      PROCEDURE mod(VAR s : Scanner.Source; VAR g : Gen.Gen; VAR g2 : Gen.Gen);

        BEGIN
          IF g2.addr1 = 0 THEN
            Scanner.RaiseError(s, Base.ErrDivZero)
          ELSE
            g.addr1 := g.addr1 MOD g2.addr1
          END
        END mod;


      PROCEDURE add(VAR s : Scanner.Source; VAR g : Gen.Gen; VAR g2 : Gen.Gen);

        BEGIN
          IF Sys.MaxInt - g2.addr1 < g.addr1 THEN
            Scanner.RaiseError(s, Base.ErrIntOverflow)
          ELSE
            g.addr1 := g.addr1 + g2.addr1
          END
        END add;


      PROCEDURE sub(VAR s : Scanner.Source; VAR g : Gen.Gen; VAR g2 : Gen.Gen);

        BEGIN
          IF Sys.MinInt + g2.addr1 > g.addr1 THEN
            Scanner.RaiseError(s, Base.ErrIntOverflow)
          ELSE
            g.addr1 := g.addr1 - g2.addr1
          END
        END sub;


      BEGIN (* Op2 *)
        IF STable.types[g.type].form = STable.FormInt THEN
          IF (g.mode = STable.ClassConst) & (g2.mode = STable.ClassConst) THEN
            IF op = Scanner.TokAsterisk THEN mul(s, g, g2)
            ELSIF op = Scanner.TokDiv THEN div(s, g, g2)
            ELSIF op = Scanner.TokMod THEN mod(s, g, g2)
            ELSIF op = Scanner.TokPlus THEN add(s, g, g2)
            ELSIF op = Scanner.TokMinus THEN sub(s, g, g2)
            END
          ELSE
            Gen.Op2(s, g, g2, op)
          END
        ELSE
          Gen.Op2(s, g, g2, op)
        END
      END Op2;


    PROCEDURE simpleExpr(VAR s : Scanner.Source; VAR g : Gen.Gen);

      VAR op : INTEGER; g2 : Gen.Gen;


      PROCEDURE term(VAR s : Scanner.Source; VAR g : Gen.Gen);

        VAR op : INTEGER; g2 : Gen.Gen;


        PROCEDURE factor(VAR s : Scanner.Source; VAR g : Gen.Gen);

          VAR y : INTEGER;


          PROCEDURE selector(VAR s : Scanner.Source; VAR g : Gen.Gen);

            VAR g2 : Gen.Gen; y : INTEGER;

            BEGIN
              WHILE (s.token = Scanner.TokBrackL) OR
                    (s.token = Scanner.TokDot) DO
                IF s.token = Scanner.TokBrackL THEN
                  IF STable.types[g.type].form = STable.FormArray THEN
                    Scanner.Next(s);
                    g2.expConst := FALSE;
                    expr(s, g2);
                    checkInt(s, g2);
                    Gen.Index(s, g, g2);
                    accept(s, Scanner.TokBrackR);
                    g.type := STable.types[g.type].value;
                    g.size := STable.types[g.type].size
                  ELSE
                    Scanner.RaiseError(s, Base.ErrArrayExp)
                  END
                ELSE
                  IF STable.types[g.type].form = STable.FormRecord THEN
                    Scanner.Next(s); accept(s, Scanner.TokIdent);
                    STable.CopyIdent(STable.symbols[STable.Marker].name, s.ident);
                    STable.FindSymbol(y, STable.types[g.type].value);
                    y := STable.symbols[y].next;
                    IF y # STable.Marker THEN
                      g.type := STable.symbols[y].type;
                      g.size := STable.types[STable.symbols[y].type].size;
                      Gen.Field(g, STable.symbols[y])
                    ELSE
                      Scanner.RaiseError(s, Base.ErrIdentUndef)
                    END
                  ELSE
                    Scanner.RaiseError(s, Base.ErrRecordExp)
                  END
                END;
                Scanner.Next(s)
              END
            END selector;


          PROCEDURE stdFunc(VAR s : Scanner.Source; VAR g : Gen.Gen; VAR y : STable.Symbol);

            BEGIN
              Scanner.Next(s);
              accept(s, Scanner.TokParenL);
              Scanner.Next(s);
              g.expConst := FALSE;
              expr(s, g);
              IF y.value = 1 (* ADDR *) THEN
                Gen.Addr(s, g);
                g.type := STable.intType
              ELSIF y.value = 2 (* CHR *) THEN
                checkInt(s, g);
                g.type := STable.charType
              ELSIF y.value = 3 (* ORD *) THEN
                checkChar(s, g);
                g.type := STable.intType
              END;
              accept(s, Scanner.TokParenR);
              Scanner.Next(s)
            END stdFunc;


          BEGIN (* factor *)
            IF s.token = Scanner.TokChar THEN
              g.mode := STable.ClassConst;
              g.type := STable.charType;
              g.addr1 := s.value;
              Scanner.Next(s)
            ELSIF s.token = Scanner.TokInt THEN
              g.mode := STable.ClassConst;
              g.type := STable.intType;
              g.addr1 := s.value;
              Scanner.Next(s)
            ELSIF s.token = Scanner.TokFalse THEN
              g.mode := STable.ClassConst;
              g.type := STable.boolType;
              g.addr1 := 0;
              Scanner.Next(s)
            ELSIF s.token = Scanner.TokTrue THEN
              g.mode := STable.ClassConst;
              g.type := STable.boolType;
              g.addr1 := 1;
              Scanner.Next(s)
            ELSIF s.token = Scanner.TokIdent THEN
              identUse(s, y);
              IF STable.symbols[y].class = STable.ClassFunc THEN
                stdFunc(s, g, STable.symbols[y])
              ELSE
                Gen.Make(s, g, STable.symbols[y]);
                Scanner.Next(s);
                selector(s, g)
              END
            ELSIF s.token = Scanner.TokParenL THEN
              Scanner.Next(s);
              expr(s, g);
              accept(s, Scanner.TokParenR);
              Scanner.Next(s)
            ELSIF s.token = Scanner.TokTilde THEN
              Scanner.Next(s);
              factor(s, g);
              checkBool(s, g);
              Gen.Op1(s, g, Scanner.TokTilde)
            ELSE
              Scanner.RaiseError(s, Base.ErrFactorExp)
            END
          END factor;


        BEGIN (* term *)
          factor(s, g);
          WHILE (s.token = Scanner.TokAsterisk) OR
                (s.token = Scanner.TokDiv) OR
                (s.token = Scanner.TokMod) OR
                (s.token = Scanner.TokAmper) DO
            op := s.token;
            IF op # Scanner.TokAmper THEN
              checkInt(s, g)
            ELSE
              checkBool(s, g);
              Gen.Op1(s, g, op)
            END;
            Scanner.Next(s);
            g2.expConst := FALSE;
            factor(s, g2);
            IF g.type = g2.type THEN
              Op2(s, g, g2, op)
            ELSE
              Scanner.RaiseError(s, Base.ErrIncompTypes)
            END
          END
        END term;


      BEGIN (* simpleExpr *)
        IF s.token = Scanner.TokPlus THEN
          Scanner.Next(s);
          term(s, g);
          checkInt(s, g)
        ELSIF s.token = Scanner.TokMinus THEN
          Scanner.Next(s);
          term(s, g);
          checkInt(s, g);
          Op1(s, g, Scanner.TokMinus)
        ELSE
          term(s, g)
        END;
        WHILE (s.token = Scanner.TokPlus) OR
              (s.token = Scanner.TokMinus) OR
              (s.token = Scanner.TokOr) DO
          op := s.token;
          IF op # Scanner.TokOr THEN
            checkInt(s, g)
          ELSE
            checkBool(s, g);
            Gen.Op1(s, g, op)
          END;
          Scanner.Next(s);
          g2.expConst := FALSE;
          term(s, g2);
          IF g.type = g2.type THEN
            Op2(s, g, g2, op)
          ELSE
            Scanner.RaiseError(s, Base.ErrIncompTypes)
          END
        END
      END simpleExpr;


    BEGIN (* expr *)
      simpleExpr(s, g);
      IF (s.token = Scanner.TokEq) OR (s.token = Scanner.TokEqN) OR
         (s.token = Scanner.TokLss) OR (s.token = Scanner.TokLEq) OR
         (s.token = Scanner.TokGtr) OR (s.token = Scanner.TokGEq) THEN
        IF ~g.expConst THEN
          op := s.token;
          Scanner.Next(s);
          g2.expConst := FALSE;
          simpleExpr(s, g2);
          IF g.type = g2.type THEN
            Gen.Rel(s, g, g2, op);
            g.type := STable.boolType;
            g.size := STable.types[STable.boolType].size
          ELSE
            Scanner.RaiseError(s, Base.ErrIncompTypes)
          END
        ELSE
          Scanner.RaiseError(s, Base.ErrConstExp)
        END
      END
    END expr;


  PROCEDURE constExpr(VAR s : Scanner.Source; VAR i : INTEGER);

    VAR g : Gen.Gen;

    BEGIN
      g.expConst := TRUE;
      expr(s, g);
      i := g.addr1
    END constExpr;


  PROCEDURE typeDef(VAR s : Scanner.Source; VAR y : INTEGER; VAR t : INTEGER;
                    class : INTEGER);

    VAR link : INTEGER; y2 : INTEGER;


    PROCEDURE array(VAR s : Scanner.Source; VAR t : INTEGER; link : INTEGER);

      VAR y : INTEGER;

      BEGIN
        Scanner.Next(s);
        STable.AllocType(s, t, STable.FormArray, 0, link);
        constExpr(s, STable.types[t].len);
        accept(s, Scanner.TokOf);
        Scanner.Next(s);
        typeDef(s, y, STable.types[t].value, 0);
        STable.TypeSize(t, STable.types[t].len *
          STable.types[STable.types[t].value].size)
      END array;


    PROCEDURE record(VAR s : Scanner.Source; VAR t : INTEGER; link : INTEGER);

      VAR addr : INTEGER;


      PROCEDURE field(VAR s : Scanner.Source; VAR t : INTEGER; VAR addr : INTEGER);

        VAR y : INTEGER;

        BEGIN
          typeDef(s, y, t, STable.ClassField);
          STable.SymbolValue(y, addr);
          addr := addr + STable.types[t].size;
          Gen.Align(addr)
        END field;


      BEGIN (* record *)
        addr := 0;
        STable.AllocSymbol(s, STable.ClassScope, level);
        Scanner.Next(s);
        field(s, t, addr);
        WHILE s.token = Scanner.TokSemic DO
          Scanner.Next(s); field(s, t, addr)
        END;
        accept(s, Scanner.TokEnd);
        STable.AllocType(s, t, STable.FormRecord, 0, link);
        STable.TypeSize(t, addr);
        STable.TypeValue(t, STable.topScope);
        STable.PopTopScope;
        Scanner.Next(s)
      END record;


    BEGIN (* typeDef *)
      link := -1;
      IF class # 0 THEN
        identDef(s, y, class);
        IF class = STable.ClassType THEN
          link := y;
          accept(s, Scanner.TokEq)
        ELSE
          accept(s, Scanner.TokColon)
        END;
        Scanner.Next(s)
      END;
      IF s.token = Scanner.TokIdent THEN
        identUse(s, y2);
        IF (class # 0) & (y = y2) THEN
          Scanner.RaiseError(s, Base.ErrIdentUndef)
        END;
        t := STable.symbols[y2].type;
        Scanner.Next(s)
      ELSIF s.token = Scanner.TokArray THEN
        array(s, t, link)
      ELSIF s.token = Scanner.TokRecord THEN
        record(s, t, link)
      ELSE
        Scanner.RaiseError(s, Base.ErrTypeExp)
      END;
      IF class # 0 THEN
        STable.SymbolType(y, t)
      END
    END typeDef;


  PROCEDURE stmts(VAR s : Scanner.Source);


    PROCEDURE stmt(VAR s : Scanner.Source);

      VAR y : INTEGER;


      PROCEDURE sys(VAR s : Scanner.Source);

        VAR call : INTEGER; g : Gen.Gen; g2 : Gen.Gen;

        BEGIN
          Scanner.Next(s); accept(s, Scanner.TokParenL);
          Scanner.Next(s); constExpr(s, call);
          accept(s, Scanner.TokComma); Scanner.Next(s);
          g.expConst := FALSE;
          expr(s, g);
          checkInt(s, g);
          IF g.mode = STable.ClassVar THEN
            accept(s, Scanner.TokComma); Scanner.Next(s);
            g2.expConst := FALSE;
            expr(s, g2);
            checkInt(s, g2);
            Gen.SysCall(s, call, g, g2);
            accept(s, Scanner.TokParenR); Scanner.Next(s)
          ELSE
            Scanner.RaiseError(s, Base.ErrNotLValue)
          END
        END sys;


      PROCEDURE assign(VAR s : Scanner.Source);

        VAR g : Gen.Gen; g2 : Gen.Gen;

        BEGIN
          expr(s, g);
          IF g.mode = STable.ClassVar THEN
            accept(s, Scanner.TokAssign); Scanner.Next(s);
            g2.expConst := FALSE;
            expr(s, g2);
            IF g.type = g2.type THEN
              Gen.Store(s, g, g2)
            ELSE
              Scanner.RaiseError(s, Base.ErrIncompTypes)
            END
          ELSE
            Scanner.RaiseError(s, Base.ErrNotLValue)
          END
        END assign;


      PROCEDURE call(VAR s : Scanner.Source; VAR proc : STable.Symbol);

        VAR y : INTEGER;


        PROCEDURE param(VAR s : Scanner.Source; VAR y : INTEGER);

          VAR g : Gen.Gen;

          BEGIN
            g.expConst := FALSE;
            expr(s, g);
            IF (y # STable.Marker) & (STable.symbols[y].value > 0) THEN
              IF STable.symbols[y].type = g.type THEN
                Gen.Param(s, g, STable.symbols[y].value2 = 1)
              ELSE
                Scanner.RaiseError(s, Base.ErrIncompTypes)
              END
            ELSE
              Scanner.RaiseError(s, Base.ErrParamsTooMany)
            END;
            y := STable.symbols[y].next
          END param;


        BEGIN (* call *)
          y := STable.symbols[proc.scope].next;
          Scanner.Next(s);
          IF s.token = Scanner.TokParenL THEN
            Scanner.Next(s); param(s, y);
            WHILE s.token = Scanner.TokComma DO
              Scanner.Next(s); param(s, y)
            END;
            accept(s, Scanner.TokParenR); Scanner.Next(s)
          END;
          IF (y = STable.Marker) OR (STable.symbols[y].value < 0) THEN
            IF proc.value = Sys.MinInt THEN (* forward call *)
              Gen.FCall(proc.value2)
            ELSE (* backward call *)
              Gen.BCall(proc.value)
            END
          ELSE
            Scanner.RaiseError(s, Base.ErrParamsTooFew)
          END
        END call;


      PROCEDURE if(VAR s : Scanner.Source);

        VAR g : Gen.Gen; l : INTEGER;

        BEGIN
          Scanner.Next(s);
          g.expConst := FALSE;
          expr(s, g);
          checkBool(s, g);
          Gen.CondFJump(s, g);
          accept(s, Scanner.TokThen); Scanner.Next(s); stmts(s);
          l := 0;
          WHILE s.token = Scanner.TokElsif DO
            Gen.FJump(l);
            Gen.FixLink(g.addr1);
            Scanner.Next(s);
            expr(s, g);
            checkBool(s, g);
            Gen.CondFJump(s, g);
            accept(s, Scanner.TokThen); Scanner.Next(s); stmts(s)
          END;
          IF s.token = Scanner.TokElse THEN
            Gen.FJump(l);
            Gen.FixLink(g.addr1);
            Scanner.Next(s); stmts(s)
          ELSE
            Gen.FixLink(g.addr1)
          END;
          Gen.FixLink(l);
          accept(s, Scanner.TokEnd); Scanner.Next(s)
        END if;


      PROCEDURE while(VAR s : Scanner.Source);

        VAR g : Gen.Gen; l : INTEGER;

        BEGIN
          Scanner.Next(s);
          l := Gen.pc;
          g.expConst := FALSE;
          expr(s, g);
          checkBool(s, g);
          Gen.CondFJump(s, g);
          accept(s, Scanner.TokDo);
          Scanner.Next(s); stmts(s);
          Gen.BJump(l);
          Gen.FixLink(g.addr1);
          accept(s, Scanner.TokEnd); Scanner.Next(s)
        END while;


      BEGIN (* stmt *)
        IF s.token = Scanner.TokIdent THEN
          identUse(s, y);
          IF STable.symbols[y].class = STable.ClassProc THEN
            call(s, STable.symbols[y])
          ELSE
            assign(s)
          END
        ELSIF s.token = Scanner.TokSys THEN
          sys(s)
        ELSIF s.token = Scanner.TokIf THEN
          if(s)
        ELSIF s.token = Scanner.TokWhile THEN
          while(s)
        ELSE
          Scanner.RaiseError(s, Base.ErrStmtExp)
        END;
        Gen.CheckRegs(s)
      END stmt;


    BEGIN (* stmts *)
      stmt(s);
      WHILE s.token = Scanner.TokSemic DO
        Scanner.Next(s); stmt(s)
      END
    END stmts;


  PROCEDURE decls(VAR s : Scanner.Source; VAR addr : INTEGER);


    PROCEDURE const(VAR s : Scanner.Source);

      VAR y : INTEGER;

      BEGIN
        WHILE s.token = Scanner.TokIdent DO
          identDef(s, y, STable.ClassConst); accept(s, Scanner.TokEq);
          Scanner.Next(s); constExpr(s, STable.symbols[y].value);
          STable.SymbolType(y, STable.intType);
          accept(s, Scanner.TokSemic);
          Scanner.Next(s)
        END
      END const;


    PROCEDURE type(VAR s : Scanner.Source);

      VAR y : INTEGER; t : INTEGER;

      BEGIN
        WHILE s.token = Scanner.TokIdent DO
          typeDef(s, y, t, STable.ClassType);
          accept(s, Scanner.TokSemic); Scanner.Next(s)
        END
      END type;


    PROCEDURE var(VAR s : Scanner.Source; VAR addr : INTEGER);

      VAR y : INTEGER; t : INTEGER; size : INTEGER;

      BEGIN
        WHILE s.token = Scanner.TokIdent DO
          typeDef(s, y, t, STable.ClassVar);
          size := STable.types[t].size;
          Gen.Align(size);
          addr := addr - size;
          STable.SymbolValue(y, addr);
          accept(s, Scanner.TokSemic); Scanner.Next(s)
        END
      END var;


    PROCEDURE proc(VAR s : Scanner.Source);

      VAR

        y : INTEGER; parsize : INTEGER; varsize : INTEGER;
        lastParam : INTEGER; eq : BOOLEAN;


      PROCEDURE params(VAR s : Scanner.Source; VAR addr : INTEGER);

        VAR y : INTEGER; t : INTEGER; offs : INTEGER;

        BEGIN
          IF s.token = Scanner.TokVar THEN
            Scanner.Next(s);
            typeDef(s, y, t, STable.ClassVar);
            STable.SymbolValue2(y, 1)
          ELSE
            typeDef(s, y, t, STable.ClassVar);
            STable.SymbolValue2(y, 0)
          END;
          IF STable.symbols[y].value2 = 0 THEN
            IF STable.types[t].form >= STable.FormArray THEN
              Scanner.RaiseError(s, Base.ErrScalarExp)
            END
          END;
          addr := addr + 4; offs := addr;
          IF s.token = Scanner.TokSemic THEN
            Scanner.Next(s); params(s, addr)
          END;
          STable.SymbolValue(y, addr - offs + 8)
        END params;


      BEGIN (* proc *)
        identDef(s, y, STable.ClassProc);
        STable.SymbolValue(y, Sys.MinInt) (* forward call marker *);
        STable.SymbolValue2(y, 0);
        level := level + 1;
        STable.AllocSymbol(s, STable.ClassScope, level);
        STable.SymbolScope(y, STable.allocSymbol);
        parsize := 0;
        IF s.token = Scanner.TokParenL THEN
          Scanner.Next(s);
          IF s.token # Scanner.TokParenR THEN
            params(s, parsize); accept(s, Scanner.TokParenR); Scanner.Next(s)
          END
        END;
        accept(s, Scanner.TokSemic); Scanner.Next(s);
        lastParam := STable.allocSymbol;
        varsize := 0;
        decls(s, varsize);
        IF STable.symbols[y].value = Sys.MinInt THEN
          Gen.FixLink(-STable.symbols[y].value2)
        END;
        STable.SymbolValue(y, -Gen.pc);
        Gen.Enter(varsize);
        accept(s, Scanner.TokBegin); Scanner.Next(s); stmts(s);
        accept(s, Scanner.TokEnd); Scanner.Next(s); accept(s, Scanner.TokIdent);
        STable.CompIdent(eq, STable.symbols[y].name, s.ident);
        IF eq THEN
          Scanner.Next(s); accept(s, Scanner.TokSemic); Scanner.Next(s)
        ELSE
          Scanner.RaiseError(s, Base.ErrNameMismatch)
        END;
        IF STable.symbols[lastParam].next # STable.Marker THEN
          STable.DeallocScope(STable.symbols[lastParam].next, FALSE);
          STable.SymbolNext(lastParam, STable.Marker)
        END;
        Gen.Return(parsize);
        STable.PopTopScope;
        level := level - 1
      END proc;


    BEGIN (* decls *)
      IF s.token = Scanner.TokConst THEN
        Scanner.Next(s); const(s)
      END;
      IF s.token = Scanner.TokType THEN
        Scanner.Next(s); type(s)
      END;
      IF s.token = Scanner.TokVar THEN
        Scanner.Next(s); var(s, addr)
      END;
      WHILE s.token = Scanner.TokProcedure DO
        Scanner.Next(s); proc(s)
      END
    END decls;


  PROCEDURE module(VAR s : Scanner.Source; VAR yModule : INTEGER);

    VAR eq : BOOLEAN;


    PROCEDURE imports(VAR s : Scanner.Source);


      PROCEDURE loadModule(VAR s : Scanner.Source; VAR yModule : INTEGER;
                           VAR name : Scanner.Ident);

        VAR
          sNew : Scanner.Source; i : INTEGER;
          fn : ARRAY Scanner.MaxLenIdent + 4 OF CHAR;


        PROCEDURE checkCyclcImport(VAR s : Scanner.Source; VAR yModule : INTEGER;
                                   VAR checkee : Scanner.Ident);

          VAR eq : BOOLEAN;

          BEGIN
            yModule := modules; eq := FALSE;
            WHILE (yModule # 0) & ~eq DO
              STable.CompIdent(eq, STable.symbols[yModule].name, checkee);
              IF ~eq THEN
                yModule := STable.symbols[yModule].value2
              END
            END;
            IF eq & (STable.symbols[yModule].value = 0) THEN
              Scanner.RaiseError(s, Base.ErrCyclicImports)
            END
          END checkCyclcImport;


        BEGIN (* loadModule *)
          checkCyclcImport(s, yModule, name);
          IF yModule = 0 THEN
            i := 0;
            WHILE i < name.len DO
              fn[i] := name.data[i]; i := i + 1
            END;
            fn[i] := 2EX; fn[i + 1] := 6EX; fn[i + 2] := 70X; fn[i + 3] := 0X;
            STable.CopyIdent(sNew.name, name);
            Scanner.OpenSource(sNew, ADDR(fn));
            IF sNew.file = 0 THEN
              Scanner.RaiseError(s, Base.ErrOpenFile)
            END;
            module(sNew, yModule)
          END
        END loadModule;


      PROCEDURE import(VAR s : Scanner.Source);

        VAR y : INTEGER; yModule : INTEGER;

        BEGIN
          identDef(s, y, STable.ClassQual);
          STable.SymbolPublic(y);
          IF s.token = Scanner.TokAssign THEN
            Scanner.Next(s); accept(s, Scanner.TokIdent);
            loadModule(s, STable.symbols[y].value, s.ident);
            Scanner.Next(s)
          ELSE
            loadModule(s, STable.symbols[y].value, STable.symbols[y].name)
          END
        END import;


      BEGIN (* imports *)
        import(s);
        WHILE s.token = Scanner.TokComma DO
          Scanner.Next(s); import(s)
        END;
        accept(s, Scanner.TokSemic); Scanner.Next(s)
      END imports;


    BEGIN (* module *)
      Scanner.Next(s); accept(s, Scanner.TokModule);
      Scanner.Next(s); accept(s, Scanner.TokIdent);
      IF source.name.len = 0 THEN
        STable.CopyIdent(s.name, s.ident)
      ELSE
        STable.CompIdent(eq, s.name, s.ident);
        IF ~eq THEN
          Scanner.RaiseError(s, Base.ErrNameMismatch)
        END
      END;
      STable.AllocSymbol(s, STable.ClassScope, level);
      identDef(s, yModule, STable.ClassModule);
      STable.SymbolPublic(yModule);
      STable.SymbolValue2(yModule, modules);
      modules := yModule;
      accept(s, Scanner.TokSemic); Scanner.Next(s);
      IF s.token = Scanner.TokImport THEN
        Scanner.Next(s); imports(s)
      END;
      decls(s, varsize);
      entrypoint := Gen.pc;
      IF s.token = Scanner.TokBegin THEN
        IF STable.symbols[yModule].value2 = 0 (* root module *) THEN
          Scanner.Next(s); stmts(s)
        ELSE
          Scanner.RaiseError(s, Base.ErrMainNotAllowed)
        END
      END;
      accept(s, Scanner.TokEnd); Scanner.Next(s); accept(s, Scanner.TokIdent);
      STable.CompIdent(eq, STable.symbols[yModule].name, s.ident);
      IF ~eq THEN
        Scanner.RaiseError(s, Base.ErrNameMismatch)
      END;
      Scanner.Next(s); accept(s, Scanner.TokDot);
      STable.SymbolValue(yModule, 1); (* compiled flag *)
      STable.DeallocScope(STable.topScope, STable.symbols[yModule].value2 # 0);
      STable.PopTopScope
    END module;


  BEGIN (* parse *)
    modules := 0; module(source, yModule)
  END parse;


BEGIN
  level := 0; varsize := 0;
  source.line := 0; source.pos := 0; source.name.len := 0;
  Scanner.OpenSource(source, 0 (* from args *));
  IF source.file = 0 THEN
    Scanner.RaiseError(source, Base.ErrOpenFile)
  END;
  Scanner.Initialize; STable.Initialize;
  STable.AllocSymbol(source, STable.ClassScope, level);
  STable.InitUniverse(source); Gen.Init; parse;
  STable.DeallocScope(STable.topScope, FALSE) (* universe *);
  Scanner.CloseSource(source);
  Gen.Epilog(varsize, entrypoint * 4);
  Gen.CreateFile
END NPC01.
